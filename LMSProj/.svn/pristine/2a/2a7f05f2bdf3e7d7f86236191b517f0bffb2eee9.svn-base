<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.ac.lms.mapper.TotalGradeMapper">
   <sql id="yrNsem">
      <if test="yrNsem != null and !yrNsem.equals('')">
         AND     A.LECA_YR || A.LECA_SEM = #{yrNsem}
      </if>
   </sql>
   <select id="getInfo" parameterType="int" resultType="memberVO">
      SELECT  U.MEM_CD,
              U.MEM_NM,
              CASE WHEN SUBSTR(U.MEM_REG2, 1, 1) in ('1', '2') THEN '19'
                   WHEN SUBSTR(U.MEM_REG2, 1, 1) in ('3', '4') THEN '20'
              END || 
              SUBSTR(U.MEM_REG1, 1, 2) || '-' ||
              SUBSTR(U.MEM_REG1, 3, 2) || '-' ||
              SUBSTR(U.MEM_REG1, 5, 2) ||
              CASE WHEN SUBSTR(U.MEM_REG2, 1, 1) IN ('1', '3') THEN ' (남)'
                   WHEN SUBSTR(U.MEM_REG2, 1, 1) IN ('2', '4') THEN ' (여)'
              END MEM_REG1,
              U.MEM_TEL,
              SUBSTR(U.MEM_CD, 1, 4) || '-03-02 (입학)' MEM_ADDR1,
              NVL((
                  SELECT  TO_CHAR(REC_DT, 'YYYY-MM-DD') || ' (' ||
                          (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = REC_CATE) || ')' COMD_NM
                  FROM    RECORD
                  WHERE   REC_CD = U.MAX
              ), ' - ') MEM_ADDR2,
              U.COL_NM || ' ' || U.DEP_NM MEM_NME,
              U.STU_YR || '학년 (' || U.STU_SEM || '학기)' MEM_ML,
              U.MEM_FNM
      FROM (
          SELECT  M.MEM_CD, M.MEM_NM, M.MEM_REG1, M.MEM_REG2, M.MEM_TEL, M.MEM_FNM,
                  S.STU_YR, S.STU_SEM,
                  C.COL_NM, D.DEP_NM,
                  MAX(R.REC_CD) MAX, MIN(R.REC_CD) MIN
          FROM    MEMBER M, STUDENT S, DEPARTMENT D, COLLEGE C, RECORD R
          WHERE   M.MEM_CD = S.STU_CD
          AND     S.DEP_CD = D.DEP_CD
          AND     D.COL_CD = C.COL_CD
          AND     S.STU_CD = R.STU_CD (+)
          GROUP BY    M.MEM_CD, M.MEM_NM, M.MEM_REG1, M.MEM_REG2, M.MEM_TEL, M.MEM_FNM,
                      S.STU_YR, S.STU_SEM,
                      C.COL_NM, D.DEP_NM
      ) U
      WHERE U.MEM_CD = #{memCd}
   </select>
   <select id="getYrNSem" parameterType="hashMap" resultType="lecApplyVO">
      SELECT  DISTINCT A.LECA_YR, A.LECA_SEM
      FROM    STU_LEC S, LEC_APPLY A
      WHERE   S.LEC_CD = A.LEC_CD
      AND     (A.LECA_YR != #{year} OR A.LECA_SEM != #{semester})
      AND     STU_CD = #{memCd}
      ORDER BY    A.LECA_YR DESC, A.LECA_SEM DESC
   </select>
   <select id="getList" parameterType="hashMap" resultType="lecApplyVO">
      SELECT  A.LECA_YR || '/' || A.LECA_SEM || '학기' LECA_CON,
              A.SUB_CD,
              A.LECA_NM, 
              (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = A.LECA_CATE) LECA_CATE,
              A.LECA_CRD,
              (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = A.LECA_GRADE) LECA_GRADE,
              (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE) LECA_NOTE,
              (SELECT COMD_CON FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE) LECA_ROOM
      FROM    STU_LEC S, LEC_APPLY A
      WHERE   S.LEC_CD = A.LEC_CD
      AND     (A.LECA_YR != #{year} OR A.LECA_SEM != #{semester})
      AND     S.STU_CD = #{memCd}
      <include refid="yrNsem"></include>
      ORDER BY A.LECA_YR DESC, A.LECA_SEM DESC, A.LEC_CD ASC
   </select>
   <select id="getNow" resultType="hashMap">
      SELECT  TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) YEAR,
              TO_NUMBER(CASE WHEN TO_CHAR(SYSDATE, 'MM') IN ('08', '09', '10', '11', '12', '1') THEN 2 ELSE 1 END) SEMESTER
      FROM DUAL
   </select>
   <select id="getCnt" parameterType="hashMap" resultType="int">
      SELECT  COUNT(S.LEC_CD) CNT
      FROM    STU_LEC S, LEC_APPLY A
      WHERE   S.LEC_CD = A.LEC_CD
      <include refid="yrNsem"></include>
      AND     STU_CD = #{memCd}
   </select>
   <select id="getPreList" parameterType="hashMap" resultType="lecApplyVO">
      SELECT  A.LECA_YR || '/' || A.LECA_SEM || '학기' LECA_CON,
            A.LECA_CD,
              A.SUB_CD,
              A.LECA_NM, 
              (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = A.LECA_CATE) LECA_CATE,
              A.LECA_CRD,
              (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = A.LECA_GRADE) LECA_GRADE,
              NVL((SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE), '성적이 등록되지 않았습니다.') LECA_NOTE,
              NVL((SELECT COMD_CON FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE), ' - ') LECA_ROOM,
              FN_ATTENDANCE(S.STU_CD, A.LEC_CD) LEC_CD
      FROM    STU_LEC S, LEC_APPLY A, ATTENADENCE T
      WHERE   S.LEC_CD = A.LEC_CD
      AND     S.LEC_CD = T.LEC_CD (+)
      AND     A.LECA_YR = #{year}
      AND     A.LECA_SEM = #{semester}
      AND     S.STU_CD = #{memCd}
   </select>
   <select id="getTgrade" parameterType="hashMap" resultType="hashMap">
      SELECT  NVL(MAX(CRD_L104), 0) GP,
              NVL(MAX(CRD_L103), 0) GS,
              NVL(MAX(CRD_L104), 0) + NVL(MAX(CRD_L103), 0) GCNT,
              NVL(MAX(SCORE_L104), 0) + NVL(MAX(SCORE_L103), 0) GSUM,
              ROUND((NVL(MAX(SCORE_L104), 0) + NVL(MAX(SCORE_L103), 0)) / 
                  CASE WHEN (NVL(MAX(CRD_L104), 0) + NVL(MAX(CRD_L103), 0)) = 0 THEN 1
                       ELSE (NVL(MAX(CRD_L104), 0) + NVL(MAX(CRD_L103), 0))
                  END 
              ,3) GDIV,
              NVL(MAX(CRD_L101), 0) JP,
              NVL(MAX(CRD_L102), 0) JS,
              NVL(MAX(CRD_L101), 0) + NVL(MAX(CRD_L102), 0) JCNT,
              NVL(MAX(SCORE_L101), 0) + NVL(MAX(SCORE_L102), 0) JSUM,
              ROUND((NVL(MAX(SCORE_L101), 0) + NVL(MAX(SCORE_L102), 0)) / 
                  CASE WHEN (NVL(MAX(CRD_L101), 0) + NVL(MAX(CRD_L102), 0)) = 0 THEN 1
                       ELSE (NVL(MAX(CRD_L101), 0) + NVL(MAX(CRD_L102), 0))
                  END     
              ,3) JDIV
      FROM(
          SELECT  DECODE(U.LECA_CATE, 'L101', U.LECA_CRD) CRD_L101,
                  DECODE(U.LECA_CATE, 'L101', U.SL_SCORE) SCORE_L101,
                  DECODE(U.LECA_CATE, 'L102', U.LECA_CRD) CRD_L102,
                  DECODE(U.LECA_CATE, 'L102', U.SL_SCORE) SCORE_L102,
                  DECODE(U.LECA_CATE, 'L103', U.LECA_CRD) CRD_L103,
                  DECODE(U.LECA_CATE, 'L103', U.SL_SCORE) SCORE_L103,
                  DECODE(U.LECA_CATE, 'L104', U.LECA_CRD) CRD_L104,
                  DECODE(U.LECA_CATE, 'L104', U.SL_SCORE) SCORE_L104
          FROM (
              SELECT  A.LECA_CATE
                      , NVL(B.LECA_CRD, 0) LECA_CRD
                      , NVL(B.SL_SCORE, 0) SL_SCORE
              FROM 
              (
                  SELECT   LECA_CATE
                  FROM     LEC_APPLY
                  GROUP BY LECA_CATE
              ) A,
              (   SELECT  LECA_CATE
                          , SUM(LECA_CRD) LECA_CRD
                          , SUM(SL_SCORE) SL_SCORE
                  FROM (
                      SELECT  S.LEC_CD
                              , A.LECA_CATE
                              , A.LECA_CRD
                              , LECA_CRD * (SELECT COMD_CON FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE) SL_SCORE
                      FROM    LEC_APPLY A, STU_LEC S
                      WHERE   A.LEC_CD = S.LEC_CD
                              AND S.STU_CD = #{memCd}
                              AND S.SL_SCORE != 'G110'
                              <include refid="yrNsem"></include>
                  )
                  GROUP BY LECA_CATE
              ) B
              WHERE   A.LECA_CATE = B.LECA_CATE (+)
              ORDER BY LECA_CATE ASC
          ) U
      )
   </select>
   <select id="getTcnt" parameterType="hashMap" resultType="int">
      SELECT  NVL(SUM(A.LECA_CRD), 0)
      FROM    LEC_APPLY A, STU_LEC S
      WHERE   A.LEC_CD = S.LEC_CD
      AND     S.STU_CD = #{memCd}
      <include refid="yrNsem"></include>
   </select>
   <select id="getCourseInfo" parameterType="int" resultType="lecApplyVO">
      SELECT  A.LECA_YR || '/' || A.LECA_SEM || '학기' LECA_BOOK
              , A.SUB_CD
              , A.LECA_NM
              , M.MEM_NM ||
              ' (' || C.COL_NM || ' ' || D.DEP_NM || ')' LECA_NOTE
              , A.LEC_CD
      FROM    LEC_APPLY A, MEMBER M, PROFESSOR P, DEPARTMENT D, COLLEGE C
      WHERE   A.PRO_CD = M.MEM_CD
      AND     M.MEM_CD = P.PRO_CD
      AND     P.DEP_CD = D.DEP_CD
      AND     D.COL_CD = C.COL_CD
      AND     A.LECA_CD = #{lecaCd}
   </select>
   <select id="checkObjection" parameterType="hashMap" resultType="objectionVO">
      SELECT  *
      FROM    OBJECTION
      WHERE   STU_CD = #{memCd}
      AND     LEC_CD = (SELECT LEC_CD FROM LEC_APPLY WHERE LECA_CD = #{lecaCd})
   </select>
   <insert id="insertObjection" parameterType="objectionVO">
      INSERT INTO OBJECTION (OBJ_CD, LEC_CD, STU_CD, OBJ_TTL, OBJ_CON, OBJ_DT)
      VALUES(
          OBJECTION_SEQ.NEXTVAL,
          #{lecCd},
          #{stuCd},
          #{objTtl},
          #{objCon},
          SYSDATE
      )
   </insert>
   <select id="getPhoto" parameterType="int" resultType="String">
      SELECT  MEM_FNM
      FROM    MEMBER
      WHERE   MEM_CD = #{memCd}
   </select>

	<!-- 성적 이의 신청 리스트(교수) -->
	<select id="objectionList" parameterType="int" resultType="objectionVO">
		SELECT O.OBJ_CD, 
				LA.LECA_YR || '년도 ' || LA.LECA_SEM || '학기' LECA_YRNSEM,
		        O.OBJ_DT, O.LEC_CD, LA.LECA_NM, O.STU_CD, M.MEM_NM STU_NM, 
		        (CASE O.OBJ_YN WHEN 0 THEN '승인대기'
		                        WHEN 1 THEN '승인'
		                        WHEN 2 THEN '반려'
		            END) OBJ_YNS
		FROM OBJECTION O LEFT OUTER JOIN STU_LEC SL ON(O.LEC_CD = SL.LEC_CD)
		                INNER JOIN LEC_APPLY LA ON(SL.LEC_CD = LA.LEC_CD)
		                INNER JOIN STUDENT S ON(SL.STU_CD = S.STU_CD)
		                INNER JOIN MEMBER M ON(S.STU_CD = M.MEM_CD)
		WHERE LA.PRO_CD = #{ proCd }
		ORDER BY OBJ_DT DESC
	</select>
	
	<!-- 성적 이의 신청 상세정보 출력 -->
	<select id="objDetail" parameterType="int" resultType="objectionVO">
		SELECT (CASE O.OBJ_YN WHEN 0 THEN '승인대기'
		                        WHEN 1 THEN '승인'
		                        WHEN 2 THEN '반려'
		        END) OBJ_YNS,
		        O.LEC_CD, LA.LECA_NM,
		        LA.LECA_YR || '년도 ' || LA.LECA_SEM || '학기' LECA_YRNSEM,
		        TO_CHAR(O.OBJ_DT, 'YYYY-MM-DD HH:MI:SS') OBJ_DTT,
		        C.COL_NM || ' ' || D.DEP_NM COL_DEP,
		        S.STU_YR || '학년(' || S.STU_SEM || '학기)' YR_SEM,
		        S.STU_CD, M.MEM_NM STU_NM, 
		        (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = LA.LECA_GRADE) LECA_GRADE,
		        (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = SL.SL_SCORE) || '(' || (SELECT COMD_CON FROM COMMON_DETAIL WHERE COMD_CD = SL.SL_SCORE) || ')' SL_SCORE,
		        O.OBJ_TTL, O.OBJ_CON, O.OBJ_RPL
		FROM OBJECTION O LEFT OUTER JOIN STU_LEC SL ON(O.LEC_CD = SL.LEC_CD)
		                INNER JOIN LEC_APPLY LA ON(SL.LEC_CD = LA.LEC_CD)
		                INNER JOIN STUDENT S ON(SL.STU_CD = S.STU_CD)
		                INNER JOIN MEMBER M ON(SL.STU_CD = M.MEM_CD)
		                INNER JOIN DEPARTMENT D ON(S.DEP_CD = D.DEP_CD)
		                INNER JOIN COLLEGE C ON(D.COL_CD = C.COL_CD)
		WHERE OBJ_CD = #{ objCd }
	</select>
	
	<!-- 성적 이의 신청 승인 -->
	<update id="updateY" parameterType="objectionVO">
		UPDATE OBJECTION
		SET OBJ_YN = 1, OBJ_RPL = #{ objRpl }
		WHERE OBJ_CD = #{ objCd }
	</update>
	
	<!-- 성적 이의 신청 반려 -->
	<update id="updateN" parameterType="objectionVO">
		UPDATE OBJECTION
		SET OBJ_YN = 2, OBJ_RPL = #{ objRpl }
		WHERE OBJ_CD = #{ objCd }
	</update>
	
	<select id="ptlYrNSem" parameterType="int" resultType="lecApplyVO">
		SELECT  DISTINCT A.LECA_YR, A.LECA_SEM
		FROM    STU_LEC S, LEC_APPLY A
		WHERE   S.LEC_CD = A.LEC_CD
		AND     STU_CD = #{memCd}
		ORDER BY    A.LECA_YR DESC, A.LECA_SEM DESC
	</select>
	
	<select id="ptlList" parameterType="hashMap" resultType="lecApplyVO">
		SELECT  A.LECA_NM,
		        (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = A.LECA_CATE) LECA_CON,
		        A.LECA_CRD,
		        (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE) LECA_BOOK
		FROM    LEC_APPLY A, STU_LEC S
		WHERE   A.LEC_CD = S.LEC_CD
		AND     S.STU_CD = #{memCd}
		AND     A.LECA_YR  || A.LECA_SEM = #{yrNsem}
		ORDER BY (
		    CASE WHEN LECA_CON = '전필' THEN 1
		    WHEN LECA_CON = '전선' THEN 2
		    WHEN LECA_CON = '교필' THEN 3
		    ELSE 4
		    END
		), A.LECA_CD
	</select>
	
	<select id="ptlGetTotal" parameterType="hashMap" resultType="int">
		SELECT  NVL(SUM(A.LECA_CRD),0) CNT
		FROM    LEC_APPLY A, STU_LEC S
		WHERE   A.LEC_CD = S.LEC_CD
		AND     S.STU_CD = #{memCd}
		AND     A.LECA_YR  || A.LECA_SEM = #{yrNsem}
	</select>
	<select id="ptlGetTotalNotF" parameterType="hashMap" resultType="int">
		SELECT  NVL(SUM(A.LECA_CRD),0) CNT
		FROM    LEC_APPLY A, STU_LEC S
		WHERE   A.LEC_CD = S.LEC_CD
		AND     S.STU_CD = #{memCd}
		AND     A.LECA_YR  || A.LECA_SEM = #{yrNsem}
		AND     S.SL_SCORE != 'G110'
	</select>
	<select id="doughnut" parameterType="int" resultType="hashMap">
		SELECT  NVL(MAX(CRD_L104), 0) GP,
		        NVL(MAX(CRD_L103), 0) GS,
		        NVL(MAX(CRD_L101), 0) JP,
		        NVL(MAX(CRD_L102), 0) JS,
		        ROUND(
		            (MAX(SCORE_L101) +  MAX(SCORE_L102) + MAX(SCORE_L103) + MAX(SCORE_L104)) /
		            CASE WHEN NVL(MAX(CRD_L101), 0) + NVL(MAX(CRD_L102), 0) + NVL(MAX(CRD_L103), 0) + NVL(MAX(CRD_L104), 0) = 0 THEN 1
		            ELSE NVL(MAX(CRD_L101), 0) + NVL(MAX(CRD_L102), 0) + NVL(MAX(CRD_L103), 0) + NVL(MAX(CRD_L104), 0) END
		        ,3) DIV,
		        NVL(MAX(CRD_L101) + MAX(CRD_L102) + MAX(CRD_L103) + MAX(CRD_L104),0) MY_CRD,
		        NVL(DEP_CRD,0) DEP_CRD,
		        CASE WHEN NVL(MAX(CRD_L101) + MAX(CRD_L102) + MAX(CRD_L103) + MAX(CRD_L104),0) >= NVL(DEP_CRD,0) THEN 0
		        ELSE DEP_CRD - NVL(MAX(CRD_L101) + MAX(CRD_L102) + MAX(CRD_L103) + MAX(CRD_L104),0)
		        END E_CRD
		FROM(
		    SELECT  DECODE(U.LECA_CATE, 'L101', U.LECA_CRD) CRD_L101,
		            DECODE(U.LECA_CATE, 'L101', U.SL_SCORE) SCORE_L101,
		            DECODE(U.LECA_CATE, 'L102', U.LECA_CRD) CRD_L102,
		            DECODE(U.LECA_CATE, 'L102', U.SL_SCORE) SCORE_L102,
		            DECODE(U.LECA_CATE, 'L103', U.LECA_CRD) CRD_L103,
		            DECODE(U.LECA_CATE, 'L103', U.SL_SCORE) SCORE_L103,
		            DECODE(U.LECA_CATE, 'L104', U.LECA_CRD) CRD_L104,
		            DECODE(U.LECA_CATE, 'L104', U.SL_SCORE) SCORE_L104,
		            U.DEP_CRD
		    FROM (
		        SELECT  A.LECA_CATE
		                , NVL(B.LECA_CRD, 0) LECA_CRD
		                , NVL(B.SL_SCORE, 0) SL_SCORE
		                , B.DEP_CRD
		        FROM 
		        (
		            SELECT   LECA_CATE
		            FROM     LEC_APPLY
		            GROUP BY LECA_CATE
		        ) A,
		        (   SELECT  LECA_CATE
		                    , SUM(LECA_CRD) LECA_CRD
		                    , SUM(SL_SCORE) SL_SCORE
		                    , DEP_CRD
		            FROM (
		                SELECT  S.LEC_CD
		                        , A.LECA_CATE
		                        , A.LECA_CRD
		                        , LECA_CRD * (SELECT COMD_CON FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE) SL_SCORE
		                        , D.DEP_MRC + D.DEP_MOC + D.DEP_CRC + D.DEP_COC DEP_CRD
		                FROM    LEC_APPLY A, STU_LEC S, STUDENT T, DEPARTMENT D
		                WHERE   A.LEC_CD = S.LEC_CD
		                        AND S.STU_CD = T.STU_CD
		                        AND T.DEP_CD = D.DEP_CD
		                        AND S.STU_CD = #{memCd}
		                        AND S.SL_SCORE != 'G110'
		            )
		            GROUP BY LECA_CATE, DEP_CRD
		        ) B
		        WHERE   A.LECA_CATE = B.LECA_CATE (+)
		        ORDER BY LECA_CATE ASC
		    ) U
		)
		GROUP BY DEP_CRD
	</select>
</mapper>