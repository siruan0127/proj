<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<title></title>
  <link rel="stylesheet" href="/resources/css/demo.css"/>
  <link rel="stylesheet" href="/resources/css/gridstack.min.css">
  <script type="text/javascript" src="/resources/js/jquery-3.6.0.js"></script>
  <script src="https://gridstackjs.com/node_modules/gridstack/dist/gridstack-all.js"></script>
<style type="text/css">
#divTop{
	border : 1px solid #0000CD;
	background-color: #0000CD;
}
#pSide{
	width : 22%;
	height: 800px;
	background: white;
	float: left;
}
#spanP{
	font-weight: bold;
	font-size: 1.1em;
	
}
#divWhole{
	background: #fafbfe;
	width : 77.56%;
	height: 800px;
	float: left;
}
#dividiv{
	width: 90%;
	margin-left: 15px;
	float: left;
}
#plusBut{
	float: right;
}
#plusP{
	display: inline-block;
}

</style>
</head>

<body>

<div id="popup">
	<div id = "divTop">
		<i class="dripicons-view-list"></i>
		<h2 style="color: white">포틀릿 설정</h2>
	</div>
	<div id = "pSide">
		<p id="spanP">포틀릿 목록</p><br>
	<c:forEach var="data" items="${portletData}">
	<div id="dividiv">
		<div style="height: 40px;">
		<p id="plusP" >${data.poCate}</p>
		<button type="button" id="plusBut">+</button>
		</div>
		<hr>
	</div>
	</c:forEach>
	</div>
	<div id="divWhole">
		<div id="gridCont"><div class="grid-stack"></div></div>
	</div>
</div>
</body>

  <script type="text/javascript">
  
  
    let grid = GridStack.init({
      minRow: 1, // don't let it collapse when empty
      cellHeight: '7rem'
    });
    
    grid.on('added removed change', function(e, items) {
      let str = '';
      items.forEach(function(item) {
    	  str += ' (x,y)=' + item.x + ',' + item.y  + '(w,h)=' + item.w +  ',' + item.h;
	      
      }

      );
      console.log(e.type + ' ' + items.length + ' items:' + str );
    });
    
    
	
    var registerHistory = "";
    	registerHistory += "<button class='removeBut' onClick = 'grid.removeWidget(this.parentNode.parentNode)'>X</button><br>"
		registerHistory += "<p class='ptitle'>학적변동조회</p><br><br><br>"
	
	var registerSchedule = ""
		registerSchedule += "<button class='removeBut' onClick = 'grid.removeWidget(this.parentNode.parentNode)'>X</button><br>"
		registerSchedule += "<p class='ptitle'>학사일정</p><br><br><br>"
		
	var lectureApply = ""
		lectureApply += "<button class='removeBut' onClick = 'grid.removeWidget(this.parentNode.parentNode)'>X</button><br>"
			lectureApply += "<p class='ptitle'>수강신청 내역</p><br><br><br>"
	
	var newsView = ""
		newsView += "<button class='removeBut' onClick = 'grid.removeWidget(this.parentNode.parentNode)'>X</button><br>"
			newsView += "<p class='ptitle'>뉴스</p><br><br><br>"
	
	var todayWheather = ""
		todayWheather += "<button class='removeBut' onClick = 'grid.removeWidget(this.parentNode.parentNode)'>X</button><br>"
		todayWheather += "<p class='ptitle'>오늘의 대기/날씨</p><br><br><br>"
	
    var noticeBored = ""
    	noticeBored += "<button class='removeBut' onClick = 'grid.removeWidget(this.parentNode.parentNode)'>X</button><br>"
    	noticeBored += "<p class='ptitle'>공지사항</p><br><br><br>"
	    
    let serializedData = [
      {x: 0, y: 0, w: 4, h: 4, id: 'newsView', content: newsView},
      {x: 4, y: 0, w: 4, h: 4, id: 'todayWheather', content: todayWheather},
      {x: 8, y: 0, w: 4, h: 4, id: 'noticeBored', content: noticeBored},
      {x: 0, y: 2, w: 4, h: 4, id: 'registerSchedule', content: registerSchedule},
      {x: 4, y: 2, w: 4, h: 4, id: 'registerHistory', content: registerHistory},
      {x: 8, y: 2, w: 4, h: 4, id: 'lectureApply', content: lectureApply}
      
    ];
    
  	/* serializedData.forEach((n, i) =>
   	n.content = `<button onClick="grid.removeWidget(this.parentNode.parentN ode)">X</button><br> ${i}<br> ${n.content ? n.content : ''}`);*/
  	
	$.each(serializedData, function(n, i){
  		n.content = `<button onClick="grid.removeWidget(this.parentNode.parentNode)">X</button><br> ${i}<br> ${n.content ? n.content : ''}`;
  	}) 
  	let serializedFull;

    // 2.x method - just saving list of widgets with content (default)
    loadGrid = function() {
      grid.load(serializedData, true); // update things
    }

    // 2.x method
    //Save 버튼 눌렀을때 onclick 이벤트
    saveGrid = function() {
      delete serializedFull;
      serializedData = grid.save();
      document.querySelector('#saved-data').value = JSON.stringify(serializedData, null, '  ');
      var first = serializedData[0];
		var second = serializedData[1];
		var third = serializedData[2];
		var four = serializedData[3];
		var five = serializedData[4];
		var six = serializedData[5];
		
		console.log(first.id);
		console.log(second.id);
		console.log(third.id);
		console.log(four.id);
		console.log(five.id);
		console.log(six.id);
    }

    // 3.1 full method saving the grid options + children (which is recursive for nested grids)
    saveFullGrid = function() {
      serializedFull = grid.save(true, true);
      serializedData = serializedFull.children;
      document.querySelector('#saved-data').value = JSON.stringify(serializedFull, null, '  ');
    }

    // 3.1 full method to reload from scratch - delete the grid and add it back from JSON
    loadFullGrid = function() {
      if (!serializedFull) return;
      grid.destroy(true); // nuke everything
      grid = GridStack.addGrid(document.querySelector('#gridCont'), serializedFull)
    }

    clearGrid = function() {
      grid.removeAll();
    }

    loadGrid();
    
    
  </script>

</html>