package kr.ac.lms.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@RequestMapping("/weather")
@Controller
public class WeatherController {
	
	@GetMapping("/sample")
	public String sample() {
		
		return "weather/sample";
	}
	
	@ResponseBody
	@GetMapping("/getWeather")
	public String getWeather() throws IOException, ParseException {
		
		//날짜 정하기
		Date date = new Date();
		date = new Date(date.getTime() + (1000*60*60*24*-1));
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd", Locale.KOREA);
		String yesterday = sdf.format(date);
		
		//시간 정하기
		
		///////////////////////////////////////////////////////////////
		String serviceKey = "v%2FPaRr%2FEAhd8%2FJejWlpi%2BFD1OZkZ4N0gT6CqoMYJ3sP86Sbr2G5n5%2BfaIwX1VF08OULTnyqGbaZUPJYNfDdJbg%3D%3D";
		String nx = "36";	//위도
		String ny = "127";	//경도
		String baseDate = yesterday;	//조회하고 싶은 날짜
		String baseTime = "2300";	//조회하고 싶은 시간
		String numOfRows = "153";
        	
		StringBuilder urlBuilder = new StringBuilder("http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst"); /*URL*/
        urlBuilder.append("?" + URLEncoder.encode("serviceKey","UTF-8") + "=" + serviceKey); /*Service Key*/
        urlBuilder.append("&" + URLEncoder.encode("pageNo","UTF-8") + "=" + URLEncoder.encode("1", "UTF-8")); /*페이지번호*/
        urlBuilder.append("&" + URLEncoder.encode("numOfRows","UTF-8") + "=" + URLEncoder.encode(numOfRows, "UTF-8")); /*한 페이지 결과 수*/
        urlBuilder.append("&" + URLEncoder.encode("dataType","UTF-8") + "=" + URLEncoder.encode("JSON", "UTF-8")); /*요청자료형식(XML/JSON) Default: XML*/
        urlBuilder.append("&" + URLEncoder.encode("base_date","UTF-8") + "=" + URLEncoder.encode(baseDate, "UTF-8")); /*‘21년 6월 28일발표*/
        urlBuilder.append("&" + URLEncoder.encode("base_time","UTF-8") + "=" + URLEncoder.encode(baseTime, "UTF-8")); /*05시 발표*/
        urlBuilder.append("&" + URLEncoder.encode("nx","UTF-8") + "=" + URLEncoder.encode(nx, "UTF-8")); /*예보지점의 X 좌표값*/
        urlBuilder.append("&" + URLEncoder.encode("ny","UTF-8") + "=" + URLEncoder.encode(ny, "UTF-8")); /*예보지점의 Y 좌표값*/
        URL url = new URL(urlBuilder.toString());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Content-type", "application/json");
        System.out.println("Response code: " + conn.getResponseCode());
        BufferedReader rd;
        if(conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } else {
            rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
        }
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = rd.readLine()) != null) {
            sb.append(line);
        }
        rd.close();
        conn.disconnect();
        String result = sb.toString();
        System.out.println(result);
        
        // Json parser를 만들어 만들어진 문자열 데이터를 객체화 
 		JSONParser parser = new JSONParser(); 
 		JSONObject obj = (JSONObject)parser.parse(result); 
 		// response 키를 가지고 데이터를 파싱 
 		JSONObject parse_response = (JSONObject) obj.get("response"); 
 		// response 로 부터 body 찾기
 		JSONObject parse_body = (JSONObject) parse_response.get("body"); 
 		// body 로 부터 items 찾기 
 		JSONObject parse_items = (JSONObject) parse_body.get("items");

 		// items로 부터 itemlist 를 받기 
 		JSONArray parse_item = (JSONArray) parse_items.get("item");
 		String category;
 		JSONObject weather; // parse_item은 배열형태이기 때문에 하나씩 데이터를 하나씩 가져올때 사용
 		// 카테고리와 값만 받아오기
 		String day="";
 		String time="";
 		for(int i = 0 ; i < parse_item.size(); i++) {
 			weather = (JSONObject) parse_item.get(i);
 			Object fcstValue = weather.get("fcstValue");
 			Object fcstDate = weather.get("fcstDate");
 			Object fcstTime = weather.get("fcstTime");
 			//double형으로 받고싶으면 아래내용 주석 해제
 			//double fcstValue = Double.parseDouble(weather.get("fcstValue").toString());
 			category = (String)weather.get("category"); 
 			// 출력
 			if(!day.equals(fcstDate.toString())) {
 				day=fcstDate.toString();
 			}
 			if(!time.equals(fcstTime.toString())) {
 				time=fcstTime.toString();
 				System.out.println(day+"  "+time);
 			}
 			System.out.print("\tcategory : "+ category);
 			System.out.print(", fcst_Value : "+ fcstValue);
 			System.out.print(", fcstDate : "+ fcstDate);
 			System.out.println(", fcstTime : "+ fcstTime);
 		}
 		
 		return result;
	}
}