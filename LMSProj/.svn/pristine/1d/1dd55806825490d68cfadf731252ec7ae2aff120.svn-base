package kr.ac.lms.controller;



import java.util.HashMap;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.velocity.runtime.directive.Parse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.ac.lms.service.ProfessorLectureService;
import kr.ac.lms.vo.LecApplyVO;
import kr.ac.lms.vo.LecNoticeVO;
import kr.ac.lms.vo.MemberVO;
import kr.ac.lms.vo.TestQVO;
import kr.ac.lms.vo.TestVO;
import kr.ac.lms.vo.WeekplanVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/professorLecture")
@Controller
public class ProfessorLecController {

	@Autowired
	ProfessorLectureService professorLectureService;
	
	// 대시보드
	// , @RequestParam("proCd") int proCd
	@GetMapping("/list")
	public String list(@ModelAttribute MemberVO memberVO, LecApplyVO lecApplyVO, HttpServletRequest request, Model model) {
		log.info("list");
		
		HttpSession session = request.getSession();
		
		
		// 대시보드에 강의 명 목록 가져오기
		int proCd = 200231111;
		
		List<LecApplyVO> lecList = this.professorLectureService.getProLecList(proCd);
//		List<LecApplyVO> lecYr = this.professorLectureService.getLecaYr(proCd);
		
		log.info("lecApplyVO.toString()" + lecList.toString());
		
		model.addAttribute("lecture",lecList);
//		model.addAttribute("data", lecYr);
		
		//proCd=" + proCd
		return "deshboard/list";
	}
	
	// 대시보드 년도 ajax
	@ResponseBody
	@PostMapping("/getLecaYr")
	public List<LecApplyVO> getLecaYr(@RequestBody Map<String, Integer> map){
		int proCd = map.get("proCd");
		
		log.info("proCd : " + proCd);
		List<LecApplyVO> lecYr = this.professorLectureService.getLecaYr(proCd);
		return lecYr;
	}
	
	
	// 대시보드 학기 ajax
//	@RequestMapping(value="/getLecaSem", method=RequestMethod.POST, produces = "application/json")
	@ResponseBody
	@PostMapping("/getLecaSem")
	public List<LecApplyVO> getLecaSem(@RequestBody Map<String, Object> map) {
		log.info("getLecaSem");
		
		log.info("map.toString()" + map.toString());

		List<LecApplyVO> lecaSem = this.professorLectureService.getLecaSem(map);
		
		log.info("lecaSem.toString() : " + lecaSem.toString());
		
		return lecaSem;
	}
	
	// 공지사항 목록
	@GetMapping("/lecNoticeList")
	public String lecNoticeList(Model model, @RequestParam int lecCd) {
		
		log.info("lecCd>> " + lecCd);
		
		LecApplyVO lec = this.professorLectureService.getProLecOne(lecCd);
		List<LecNoticeVO> lecNotList = this.professorLectureService.lecNotList(lecCd);
		
		
		log.info("lecCd>> " + lecCd);
		
		model.addAttribute("lecNoticeVO",lecNotList);
		model.addAttribute("data",lec);
		
		return "professorLecture/lecNoticeList";
	}
	
	// 공지사항 상세보기
	@GetMapping("/lecNoticeDetail")
	public String lecNoticeDetail(int lntcCd, Model model, @ModelAttribute LecNoticeVO lecNoticeVO) {
		
		LecNoticeVO notDet = this.professorLectureService.lecNotDetail(lntcCd);
		log.info(notDet.toString());
		model.addAttribute("data",notDet);
		
		return "professorLecture/lecNoticeDetail";
	}
	
	// 공지사항 등록 화면
	// 교수 세션처리
	@GetMapping("/lecNoticeInsert")
	public String lecNoticeInsert(@ModelAttribute LecNoticeVO lecNoticeVO, @RequestParam int lecCd, Model model) {
		log.info("lecNoticeInsert>>");
		
		LecApplyVO lec = this.professorLectureService.getProLecOne(lecCd);
		
		log.info("lecCd : " + lecCd);
		
		model.addAttribute("data",lec);
		
		return "professorLecture/lecNoticeInsert";
		
	}
	
	
	// 등록 처리
	@PostMapping("/lecNotWritePost")
	public String lecNotWritePost(@ModelAttribute LecNoticeVO lecNoticeVO) {
		
		int result = this.professorLectureService.lecNotInsert(lecNoticeVO);
		
		log.info("result : " + result);
		
		return "redirect:/professorLecture/lecNoticeList?lecCd=" + lecNoticeVO.getLecCd();
	}
	
	// 공지사항 수정
	@PostMapping("/lecNotUpdatePost")
	public String lecNotUpdatePost(@ModelAttribute LecNoticeVO lecNoticeVO, Model model, RedirectAttributes rat,
			String lntcTtl, @RequestParam("lntcCon") String lntcCon) {
		
		int result = this.professorLectureService.lecNotUpdate(lecNoticeVO);
		
		log.info("result : " + result);
		
		rat.addFlashAttribute("lntcCd", lecNoticeVO.getLntcCd());
		
		log.info("lecNoticeVO.getLntcCd() : " + lecNoticeVO.getLntcCd());
		
		
		return "redirect:/professorLecture/lecNoticeDetail?lntcCd=" + lecNoticeVO.getLntcCd();
	}
	
	// 공지사항 삭제
	@PostMapping("/lecNotDeletePost")
	public String lecNotDeletePost(int lntcCd, @ModelAttribute LecNoticeVO lecNoticeVO) {
		log.info("lecNotDeletePost>>>>>");
		
		int result = this.professorLectureService.lecNotDelete(lntcCd);
		
		log.info("result : " + result);
		
		return "redirect:/professorLecture/lecNoticeList?lecCd=" + lecNoticeVO.getLecCd();
	}
	
	// 수업계획서 조회
	@GetMapping("/lecApply")
	public String lecApply(int lecCd, Model model) {
		
		log.info("lecApply");
		
		int proCd = 200231111;
		
		Map<String, Object> lecApply = new HashMap<String, Object>();
		
		lecApply.put("proCd", proCd);
		lecApply.put("lecCd", lecCd);

		
		LecApplyVO lec = this.professorLectureService.getLecApply(lecApply);
		
		int lecaCd = lec.getLecaCd();
		
		List<WeekplanVO> wee = this.professorLectureService.getWeekPlan(lecaCd);
		
		log.info("lec.toString " + lec.toString());
		
		model.addAttribute("data", lec);
		model.addAttribute("week", wee);
		
		return "professorLecture/lecApply";
	}
	
	
	// 퀴즈
	@GetMapping("/quiz")
	public String quiz(int lecCd, Model model) {
		log.info("quiz");
		
		LecApplyVO lec = this.professorLectureService.getProLecOne(lecCd);
		List<TestVO> testList = this.professorLectureService.quizBoardList(lecCd);
		
		log.info("lecCd : " + lecCd);
		
		model.addAttribute("list", testList);
		model.addAttribute("data", lec);
		
		return "professorLecture/quiz";
	}
	
	// 퀴즈 상세
	@GetMapping("/quizDetail")
	public String quizDetail(int testCd, Model model, @ModelAttribute TestVO testVO) {
		log.info("quizDetail");
		
		TestVO testQ = this.professorLectureService.quizDetail(testCd);
		
		log.info("tesQ : " + testQ);
		
		model.addAttribute("data",testQ);
		
		return "professorLecture/quizDetail";
	}
	
	// 교수의 퀴즈 생성
	// 이상한 점 : testVO에 값이 들어감 다른 수업일 경우 확인 필요
	@PostMapping("/quizInsert")
	public String quizInsert(Model model, @RequestParam int lecCd, @ModelAttribute TestVO testVO) {
		log.info("quizInsert");
		
		int result = this.professorLectureService.quizInsert(testVO);
		
		testVO.setLecCd(lecCd);
		
		log.info("result " + result);
		log.info("testVO.toString : " + testVO.toString());
		
		model.addAttribute("data", testVO);
		
		return "professorLecture/quizInsert";
	}
	
	// 교수 퀴즈 생성 확인
	@PostMapping("/quizInsertPost")
	public String quizInsertPost(@ModelAttribute TestVO testVO) {

		log.info("testVO >> " + testVO.toString());
		log.info("TestQVOList >> " + testVO.getTestQVOList());
		log.info("TestCd >> " + testVO.getTestQVOList().get(0).getTestCd());
		
		
		int firstResult = this.professorLectureService.quizInsertUpdate(testVO);
		log.info("test테이블 update 완료? " + firstResult);
		log.info("testVO.toString() : " + testVO.toString());
		log.info("testVO.getTestQVOList() : " + testVO.getTestQVOList());
		//TestQVO [teqCd=0, testCd=35, teqNo=d, teqOp1=d, teqOp2=d, teqOp3=d, teqOp4=d, teqAnswer=3, rnum=0]
		
		//testVO.getTestQVOList() -> 반복돌림
		//testqVO.setteqCd에다가 시퀀스마지막번호(시퀀스객체.currval) + 1로 세팀
		
		int result = this.professorLectureService.quizQInsert(testVO.getTestQVOList());
		log.info("testQ테이블 insert 완료 ? " + result); 
		
		return "redirect:/professorLecture/quiz?lecCd=" + testVO.getLecCd();
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
