<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.ac.lms.mapper.TotalGradeMapper">
	<sql id="yrNsem">
		<if test="yrNsem != null and !yrNsem.equals('')">
			AND     A.LECA_YR || A.LECA_SEM = #{yrNsem}
		</if>
	</sql>
	<select id="getInfo" parameterType="int" resultType="memberVO">
		SELECT  U.MEM_CD,
		        U.MEM_NM,
		        TO_CHAR(TO_DATE(U.MEM_REG1, 'YYMMDD'), 'YYYY-MM-DD') ||
		        CASE WHEN SUBSTR(U.MEM_REG2, 1, 1) IN ('1', '3') THEN ' (남)'
		             WHEN SUBSTR(U.MEM_REG2, 1, 1) IN ('2', '4') THEN ' (여)'
		        END MEM_REG1,
		        U.MEM_TEL,
		        SUBSTR(U.MEM_CD, 1, 4) || '-03-02 (입학)' MEM_ADDR1,
		        NVL((
		            SELECT  REC_DT || ' (' ||
		                    (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = REC_CATE) || ')' COMD_NM
		            FROM    RECORD
		            WHERE   REC_CD = U.MAX
		        ), ' - ') MEM_ADDR2,
		        U.COL_NM || ' ' || U.DEP_NM MEM_NME,
		        U.STU_YR || '학년 (' || U.STU_SEM || '학기)' MEM_ML
		FROM (
		    SELECT  M.MEM_CD, M.MEM_NM, M.MEM_REG1, M.MEM_REG2, M.MEM_TEL,
		            S.STU_YR, S.STU_SEM,
		            C.COL_NM, D.DEP_NM,
		            MAX(R.REC_CD) MAX, MIN(R.REC_CD) MIN
		    FROM    MEMBER M, STUDENT S, DEPARTMENT D, COLLEGE C, RECORD R
		    WHERE   M.MEM_CD = S.STU_CD
		    AND     S.DEP_CD = D.DEP_CD
		    AND     D.COL_CD = C.COL_CD
		    AND     S.STU_CD = R.STU_CD (+)
		    GROUP BY    M.MEM_CD, M.MEM_NM, M.MEM_REG1, M.MEM_REG2, M.MEM_TEL,
		                S.STU_YR, S.STU_SEM,
		                C.COL_NM, D.DEP_NM
		) U
		WHERE U.MEM_CD = #{memCd}
	</select>
	<select id="getYrNSem" parameterType="hashMap" resultType="lecApplyVO">
		SELECT  DISTINCT A.LECA_YR, A.LECA_SEM
		FROM    STU_LEC S, LEC_APPLY A
		WHERE   S.LEC_CD = A.LEC_CD
		AND     (A.LECA_YR != #{year} OR A.LECA_SEM != #{semester})
		AND     STU_CD = #{memCd}
		ORDER BY    A.LECA_YR DESC, A.LECA_SEM DESC
	</select>
	<select id="getList" parameterType="hashMap" resultType="lecApplyVO">
		SELECT  A.LECA_YR || '/' || A.LECA_SEM || '학기' LECA_CON,
		        A.SUB_CD,
		        A.LECA_NM, 
		        (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = A.LECA_CATE) LECA_CATE,
		        A.LECA_CRD,
		        (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = A.LECA_GRADE) LECA_GRADE,
		        (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE) LECA_NOTE,
		        (SELECT COMD_CON FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE) LECA_ROOM
		FROM    STU_LEC S, LEC_APPLY A
		WHERE   S.LEC_CD = A.LEC_CD
		AND     (A.LECA_YR != #{year} OR A.LECA_SEM != #{semester})
		AND     S.STU_CD = #{memCd}
		<include refid="yrNsem"></include>
		ORDER BY A.LECA_YR DESC, A.LECA_SEM DESC, A.LEC_CD ASC
	</select>
	<select id="getNow" resultType="hashMap">
		SELECT  TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) YEAR,
        		TO_NUMBER(CASE WHEN TO_CHAR(SYSDATE, 'MM') IN ('08', '09', '10', '11', '12', '1') THEN 2 ELSE 1 END) SEMESTER
		FROM DUAL
	</select>
	<select id="getCnt" parameterType="hashMap" resultType="int">
		SELECT  COUNT(S.LEC_CD) CNT
		FROM    STU_LEC S, LEC_APPLY A
		WHERE   S.LEC_CD = A.LEC_CD
		<include refid="yrNsem"></include>
		AND     STU_CD = #{memCd}
	</select>
	<select id="getPreList" parameterType="hashMap" resultType="lecApplyVO">
		SELECT  A.LEC_CD,
				A.LECA_YR || '/' || A.LECA_SEM || '학기' LECA_CON,
		        A.SUB_CD,
		        A.LECA_NM, 
		        (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = A.LECA_CATE) LECA_CATE,
		        A.LECA_CRD,
		        (SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = A.LECA_GRADE) LECA_GRADE,
		        NVL((SELECT COMD_NM FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE), '성적이 등록되지 않았습니다.') LECA_NOTE,
		        NVL((SELECT COMD_CON FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE), ' - ') LECA_ROOM
		FROM    STU_LEC S, LEC_APPLY A
		WHERE   S.LEC_CD = A.LEC_CD
		AND     A.LECA_YR = #{year}
		AND     A.LECA_SEM = #{semester}
		AND     S.STU_CD = #{memCd}
	</select>
	<select id="getTgrade" parameterType="hashMap" resultType="hashMap">
		SELECT  NVL(MAX(CRD_L104), 0) GP,
		        NVL(MAX(CRD_L103), 0) GS,
		        NVL(MAX(CRD_L104), 0) + NVL(MAX(CRD_L103), 0) GCNT,
		        NVL(MAX(SCORE_L104), 0) + NVL(MAX(SCORE_L103), 0) GSUM,
		        ROUND((NVL(MAX(SCORE_L104), 0) + NVL(MAX(SCORE_L103), 0)) / 
		            CASE WHEN (NVL(MAX(CRD_L104), 0) + NVL(MAX(CRD_L103), 0)) = 0 THEN 1
		                 ELSE (NVL(MAX(CRD_L104), 0) + NVL(MAX(CRD_L103), 0))
		            END 
		        ,3) GDIV,
		        NVL(MAX(CRD_L101), 0) JP,
		        NVL(MAX(CRD_L102), 0) JS,
		        NVL(MAX(CRD_L101), 0) + NVL(MAX(CRD_L102), 0) JCNT,
		        NVL(MAX(SCORE_L101), 0) + NVL(MAX(SCORE_L102), 0) JSUM,
		        ROUND((NVL(MAX(SCORE_L101), 0) + NVL(MAX(SCORE_L102), 0)) / 
		            CASE WHEN (NVL(MAX(CRD_L101), 0) + NVL(MAX(CRD_L102), 0)) = 0 THEN 1
		                 ELSE (NVL(MAX(CRD_L101), 0) + NVL(MAX(CRD_L102), 0))
		            END     
		        ,3) JDIV
		FROM(
		    SELECT  DECODE(U.LECA_CATE, 'L101', U.LECA_CRD) CRD_L101,
		            DECODE(U.LECA_CATE, 'L101', U.SL_SCORE) SCORE_L101,
		            DECODE(U.LECA_CATE, 'L102', U.LECA_CRD) CRD_L102,
		            DECODE(U.LECA_CATE, 'L102', U.SL_SCORE) SCORE_L102,
		            DECODE(U.LECA_CATE, 'L103', U.LECA_CRD) CRD_L103,
		            DECODE(U.LECA_CATE, 'L103', U.SL_SCORE) SCORE_L103,
		            DECODE(U.LECA_CATE, 'L104', U.LECA_CRD) CRD_L104,
		            DECODE(U.LECA_CATE, 'L104', U.SL_SCORE) SCORE_L104
		    FROM (
		        SELECT  A.LECA_CATE
		                , NVL(B.LECA_CRD, 0) LECA_CRD
		                , NVL(B.SL_SCORE, 0) SL_SCORE
		        FROM 
		        (
		            SELECT   LECA_CATE
		            FROM     LEC_APPLY
		            GROUP BY LECA_CATE
		        ) A,
		        (   SELECT  LECA_CATE
		                    , SUM(LECA_CRD) LECA_CRD
		                    , SUM(SL_SCORE) SL_SCORE
		            FROM (
		                SELECT  S.LEC_CD
		                        , A.LECA_CATE
		                        , A.LECA_CRD
		                        , LECA_CRD * (SELECT COMD_CON FROM COMMON_DETAIL WHERE COMD_CD = S.SL_SCORE) SL_SCORE
		                FROM    LEC_APPLY A, STU_LEC S
		                WHERE   A.LEC_CD = S.LEC_CD
		                        AND S.STU_CD = #{memCd}
		                        AND S.SL_SCORE != 'G110'
		                        <include refid="yrNsem"></include>
		            )
		            GROUP BY LECA_CATE
		        ) B
		        WHERE   A.LECA_CATE = B.LECA_CATE (+)
		        ORDER BY LECA_CATE ASC
		    ) U
		)
	</select>
	<select id="getTcnt" parameterType="hashMap" resultType="int">
		SELECT  NVL(SUM(A.LECA_CRD), 0)
		FROM    LEC_APPLY A, STU_LEC S
		WHERE   A.LEC_CD = S.LEC_CD
		AND     S.STU_CD = #{memCd}
		<include refid="yrNsem"></include>
	</select>
</mapper>